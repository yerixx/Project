{
  "frontEnd": [
    {
      "id": 1,
      "stack": {
        "num": "001",
        "title": "Next.js",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    },
    {
      "id": 2,
      "stack": {
        "num": "002",
        "title": "Typescript",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    },
    {
      "id": 3,
      "stack": {
        "num": "003",
        "title": "React.js",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    },
    {
      "id": 4,
      "stack": {
        "num": "004",
        "title": "Javascript",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    },
    {
      "id": 5,
      "stack": {
        "num": "005",
        "title": "Styled-components",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    },
    {
      "id": 6,
      "stack": {
        "num": "006",
        "title": "SCSS",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    },
    {
      "id": 7,
      "stack": {
        "num": "007",
        "title": "HTML",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    },
    {
      "id": 8,
      "stack": {
        "num": "008",
        "title": "CSS",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    }
  ],
  "devTools": [
    {
      "id": 1,
      "stack": {
        "num": "001",
        "title": "Firebase",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    },

    {
      "id": 2,
      "stack": {
        "num": "002",
        "title": "Supabase",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    },
    {
      "id": 3,
      "stack": {
        "num": "003",
        "title": "Netlify",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    },
    {
      "id": 4,
      "stack": {
        "num": "004",
        "title": "Github",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    },
    {
      "id": 5,
      "stack": {
        "num": "005",
        "title": "Figma",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    }
  ],
  "experience": [
    {
      "id": 1,
      "stack": {
        "num": "001",
        "title": "KDT",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    },
    {
      "id": 2,
      "stack": {
        "num": "002",
        "title": "KDT",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    },
    {
      "id": 3,
      "stack": {
        "num": "003",
        "title": "KDT",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    }
  ]
}

{
  "frontEnd": [
    {
      "id": 1,
      "stack": {
        "icon": "SiNextdotjs",
        "num": "001",
        "title": "Next.js",
        "desc": "서버 사이드 렌더링(SSR) 및 정적 사이트 생성(SSG)을 활용하여 SEO와 초기 로딩 속도를 최적화할 수 있습니다. \n동적 라우팅 및 API 라우트를 사용하여 효율적인 웹 애플리케이션을 구축합니다."
      }
    },
    {
      "id": 2,
      "stack": {
        "icon": "BiLogoTypescript",
        "num": "002",
        "title": "TypeScript",
        "desc": "정적 타입 시스템을 활용하여 코드의 안정성과 가독성을 높이며, 유지보수가 용이한 프론트엔드 애플리케이션을 개발합니다. \n인터페이스와 제네릭을 적극 활용하여 재사용성을 높입니다."
      }
    },
    {
      "id": 3,
      "stack": {
        "icon": "FaReact",
        "num": "003",
        "title": "React.js",
        "desc": "컴포넌트 기반 아키텍처를 통해 UI를 효율적으로 개발하며, 상태 관리를 위해 Context API와 Redux를 활용합니다. 성능 최적화를 위해 React.memo 및 useCallback 등을 사용합니다."
      }
    },
    {
      "id": 4,
      "stack": {
        "icon": "RiJavascriptFill",
        "num": "004",
        "title": "JavaScript",
        "desc": "비동기 처리(Promise, async/await)를 활용하여 데이터를 효율적으로 처리하며, DOM 조작과 이벤트 핸들링을 통해 동적 웹 애플리케이션을 개발합니다."
      }
    },
    {
      "id": 5,
      "stack": {
        "icon": "SiStyledcomponents",
        "num": "005",
        "title": "Styled-components",
        "desc": "컴포넌트 단위의 스타일링을 통해 CSS-in-JS 방식으로 유지보수성과 확장성이 높은 스타일을 작성하며, props를 활용한 동적 스타일링이 가능합니다."
      }
    },
    {
      "id": 6,
      "stack": {
        "icon": "BsFiletypeScss",
        "num": "006",
        "title": "SCSS",
        "desc": "변수, 믹스인, 중첩(Nesting) 기능을 활용하여 유지보수와 재사용성이 높은 스타일을 작성하며, BEM 방식과 함께 체계적인 CSS 구조를 설계합니다."
      }
    },
    {
      "id": 7,
      "stack": {
        "icon": "IoLogoHtml5",
        "num": "007",
        "title": "HTML",
        "desc": "웹 표준과 접근성을 준수하여 시맨틱 마크업을 작성하며, SEO를 고려한 구조적인 페이지를 구성합니다."
      }
    },
    {
      "id": 8,
      "stack": {
        "icon": "IoLogoCss3",
        "num": "008",
        "title": "CSS",
        "desc": "반응형 웹 디자인(Responsive Web Design)을 적용하여 다양한 디바이스에 최적화된 UI를 구현하며, 애니메이션 및 트랜지션을 통해 사용자 경험을 향상시킵니다."
      }
    }
  ],
  "devTools": [
    {
      "id": 1,
      "stack": {
        "icon": "IoLogoFirebase",
        "num": "001",
        "title": "Firebase",
        "desc": "실시간 데이터베이스, 인증, 클라우드 기능을 제공하여 빠르게 애플리케이션을 개발하고 배포할 수 있습니다. 서버리스 아키텍처를 활용하여 확장성과 유지보수를 용이하게 합니다."
      }
    },
    {
      "id": 2,
      "stack": {
        "icon": "RiSupabaseFill",
        "num": "002",
        "title": "Supabase",
        "desc": "PostgreSQL 기반의 오픈 소스 백엔드를 활용하여 실시간 데이터베이스, 인증 및 스토리지를 제공하며, Firebase와 유사한 기능을 제공합니다."
      }
    },
    {
      "id": 3,
      "stack": {
        "icon": "SiNetlify",
        "num": "003",
        "title": "Netlify",
        "desc": "정적 웹사이트 호스팅 및 CI/CD 기능을 제공하여 빠른 배포와 지속적인 통합을 지원하며, 서버리스 기능을 통한 백엔드 로직 구현이 가능합니다."
      }
    },
    {
      "id": 4,
      "stack": {
        "icon": "FaGithub",
        "num": "004",
        "title": "Github",
        "desc": "버전 관리를 통해 프로젝트의 협업 및 이력을 관리할 수 있으며, Github Actions를 통해 CI/CD 파이프라인을 구축할 수 있습니다."
      }
    },
    {
      "id": 5,
      "stack": {
        "icon": "FaFigma",
        "num": "005",
        "title": "Figma",
        "desc": "디자인 시스템을 구축하고 팀과의 협업을 원활하게 하며, 프로토타입 제작을 통해 개발 전에 사용자 경험을 시각적으로 검토할 수 있습니다."
      }
    }
  ],
  "experience": [
    {
      "id": 1,
      "stack": {
        "icon": "GoBook",
        "num": "001",
        "title": "KDT",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    },
    {
      "id": 2,
      "stack": {
        "icon": "GoBook",
        "num": "002",
        "title": "KDT",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    },
    {
      "id": 3,
      "stack": {
        "icon": "GoBook",
        "num": "003",
        "title": "KDT",
        "desc": "Atomic한 단위의 컴포넌트 개발을 좋아하며, 재사용성과 확장성을 고려합니다. 재사용성이 높은 공통 비즈니스 로직의 경우 Hook을 이용하여 공통 Hooks로 만들어 모듈화 합니다. 컴포넌트의 불필요한 리렌더링이 발생하지 않도록 개발하려 노력합니다."
      }
    }
  ]
}
